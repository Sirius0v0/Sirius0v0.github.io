(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{539:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"使用cmake模块化项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用cmake模块化项目"}},[t._v("#")]),t._v(" 使用CMake模块化项目")]),t._v(" "),a("blockquote",[a("p",[t._v("该笔记参考"),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1V84y117YU",target:"_blank",rel:"noopener noreferrer"}},[t._v("BiliBili-【公开课】现代CMake模块化项目管理指南【C/C++】"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"推荐的目录组织结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐的目录组织结构"}},[t._v("#")]),t._v(" 推荐的目录组织结构")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("项目名/include/项目名/模块名.h")])]),t._v(" "),a("li",[a("code",[t._v("项目名/src/模块名.cpp")])])]),t._v(" "),a("p",[t._v("如下是一个例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".\n├── CMakeLists.txt\n├── biology\n│   ├── CMakeLists.txt\n│   ├── include\n│   │   └── biology\n│   │       ├── Animal.h\n│   │       └── Carer.h\n│   └── src\n│       ├── Animal.cpp\n│       └── Carer.cpp\n├── cmake\n│   └── MyUsefulFuncs.cmake\n└── pybmain\n    ├── CMakeLists.txt\n    ├── include\n    │   └── pybmain\n    │       └── myutils.h\n    └── src\n        └── main.cpp\n")])])]),a("p",[t._v("头文件一般会在"),a("code",[t._v("include")]),t._v("目录里再嵌套一个项目名，目的是为了 "),a("strong",[t._v("避免头文件命名冲突")]),t._v("，例如：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pybmain/myutils.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<biology/myutils.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若没有项目名，就会产生冲突")]),t._v("\n")])])]),a("h3",{attrs:{id:"各文件推荐写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#各文件推荐写法"}},[t._v("#")]),t._v(" 各文件推荐写法")]),t._v(" "),a("p",[a("strong",[t._v("CMakeLists.txt")]),t._v(":")]),t._v(" "),a("blockquote",[a("p",[t._v("CMakeLists.txt中推荐使用"),a("code",[t._v("target_include_directories(项目名 PUBLIC include)")]),t._v(";")]),t._v(" "),a("p",[t._v("不要使用"),a("code",[t._v("include_directories(include)")]),t._v("，这样会污染头文件空间")])]),t._v(" "),a("p",[a("strong",[t._v(".c")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<项目名/模块名.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" 项目名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" 函数名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" 函数实现 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v(".h")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("once")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" 项目名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" 函数名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"一、划分子项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、划分子项目"}},[t._v("#")]),t._v(" 一、划分子项目")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("即使"),a("strong",[t._v("只有一个子项目，也建议你创建一个子目录")]),t._v("，方便以后追加新的子项目；")])]),t._v(" "),a("li",[a("p",[t._v("子项目，例如"),a("code",[t._v("biology")]),t._v(" 和 "),a("code",[t._v("pybmain")]),t._v("，他们分别在各自的目录下有自己的 "),a("code",[t._v("CMakeLists.txt")]),t._v("。")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("一般一个项目是可执行文件（比如这里的"),a("code",[t._v("pybmain")]),t._v("），另一个是库文件（比如这里的"),a("code",[t._v("biology")]),t._v("）")]),t._v(" "),a("li",[t._v("可执行文件是给用户使用的，一般只有交互的逻辑；而实际代码的实现逻辑一般都在库当中。")])])])]),t._v(" "),a("h2",{attrs:{id:"二、根目录的cmakelists-txt配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、根目录的cmakelists-txt配置"}},[t._v("#")]),t._v(" 二、根目录的CMakeLists.txt配置")]),t._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("VERSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_BUILD_TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_BUILD_TYPE")]),t._v(" Release"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endif")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_CXX_STANDARD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_CXX_STANDARD_REQUIRED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("ON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_CXX_EXTENSIONS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("OFF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_MODULE_PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_CURRENT_LIST_DIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("/cmake;"),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("CMAKE_MODULE_PATH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CppCMakeDemo LANGUAGES CXX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyUsefulFuncs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_subdirectory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pybmain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_subdirectory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("biology"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("根项目的 "),a("code",[t._v("CMakeLists.txt")]),t._v(" 中，设置默认的构建模式，设置统一的 C++ 版本等各种选项。然后通过 "),a("code",[t._v("project")]),t._v(" 命令初始化根项目。")]),t._v(" "),a("p",[t._v("随后通过 "),a("code",[t._v("add_subdirectory")]),t._v(" 把两个子项目 "),a("code",[t._v("pybmain")]),t._v(" 和 "),a("code",[t._v("biology")]),t._v(" 添加进来，这会调用 "),a("code",[t._v("pybmain/CMakeLists.txt")]),t._v(" 和 "),a("code",[t._v("biology/CMakeLists.txt")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"三、子项目的cmakelists-txt配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、子项目的cmakelists-txt配置"}},[t._v("#")]),t._v(" 三、子项目的CMakeLists.txt配置")]),t._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GLOB_RECURSE srcs CONFIGURE_DEPENDS src/*.cpp include/*.h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_library")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("biology "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("STATIC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("srcs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_include_directories")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("biology "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("PUBLIC")]),t._v(" include"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("子项目中主要创建了静态库对象，通过"),a("code",[t._v("GLOB_RECRUSE")]),t._v("批量添加位于"),a("code",[t._v("src")]),t._v("和"),a("code",[t._v("include")]),t._v("下的源码与头文件。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("根项目")]),t._v("的 "),a("code",[t._v("CMakeLists.txt")]),a("strong",[t._v("负责处理全局有效的设定")]),t._v("。")]),t._v(" "),a("li",[t._v("而"),a("strong",[t._v("子项目")]),t._v("的 "),a("code",[t._v("CMakeLists.txt")]),t._v(" 则"),a("strong",[t._v("仅考虑该子项目自身的设定")]),t._v("，比如他的"),a("strong",[t._v("头文件目录")]),t._v("，要"),a("strong",[t._v("链接的库")]),t._v("等等。")])]),t._v(" "),a("h3",{attrs:{id:"glob与glob-recruse的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glob与glob-recruse的区别"}},[t._v("#")]),t._v(" GLOB与GLOB_RECRUSE的区别")]),t._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GLOB myvar CONFIGURE_DEPENDS src/*.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GLOB_RECURSE myvar CONFIGURE_DEPENDS src/*.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("GLOB")]),t._v("只能查找到往下一级的文件，而"),a("code",[t._v("GLOB_RECURSE")]),t._v("能查到"),a("strong",[t._v("嵌套的目录")]),t._v("；")]),t._v(" "),a("li",[t._v("添加"),a("code",[t._v("CONFIGURE_DEPENDS")]),t._v("选项会在你创建了新文件后，进行"),a("code",[t._v("cmake --build")]),t._v("时自动检测目录是否更新，并更新变量"),a("code",[t._v("myvar")]),t._v("的值，而无需手动重新运行"),a("code",[t._v("cmake -B build")])])]),t._v(" "),a("h2",{attrs:{id:"四、子项目的头文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、子项目的头文件"}},[t._v("#")]),t._v(" 四、子项目的头文件")]),t._v(" "),a("ul",[a("li",[t._v("这里需要给 "),a("code",[t._v("biology")]),a("strong",[t._v("库")]),t._v("设置了"),a("strong",[t._v("头文件搜索路径")]),a("code",[t._v("include")]),t._v("。")]),t._v(" "),a("li",[t._v("由于子项目的 "),a("code",[t._v("CMakeLists.txt")]),t._v(" 里指定的路径都是"),a("strong",[t._v("相对路径")]),t._v("，所以这里指定的 "),a("code",[t._v("include")]),t._v(" 实际上是："),a("code",[t._v("根/biology/include")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"五、子项目的源文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、子项目的源文件"}},[t._v("#")]),t._v(" 五、子项目的源文件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("这里利用"),a("code",[t._v("file(...)")]),t._v("给 "),a("code",[t._v("biology")]),t._v(" 批量添加了 "),a("code",[t._v("src/*.cpp")]),t._v(" 下的全部源码文件。")])]),t._v(" "),a("li",[a("p",[t._v("因为子项目的 "),a("code",[t._v("CMakeLists.txt")]),t._v(" 里指定的路径都是相对路径，所以这里指定 "),a("code",[t._v("src")]),t._v(" 实际上是："),a("code",[t._v("根/biology/src")]),t._v("。")])])]),t._v(" "),a("h2",{attrs:{id:"六、只有头文件-没有源文件的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、只有头文件-没有源文件的情况"}},[t._v("#")]),t._v(" 六、只有头文件，没有源文件的情况")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("有时我们会直接"),a("strong",[t._v("把实现直接写在头文件里")]),t._v("，这时可以没有与之对应的源文件，只有一个头文件。")])]),t._v(" "),a("li",[a("p",[t._v("注意：在头文件里直接实现函数时，要加 "),a("code",[t._v("static")]),t._v(" 或 "),a("code",[t._v("inline")]),t._v(" 关键字。（类与结构体可以不加）")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("防止被重复定义")])])])]),t._v(" "),a("h2",{attrs:{id:"七、依赖其他模块但不解引用-则可以只前向声明不导入头文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、依赖其他模块但不解引用-则可以只前向声明不导入头文件"}},[t._v("#")]),t._v(" 七、依赖其他模块但不解引用，则可以只前向声明不导入头文件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("假如模块 Carer 的"),a("strong",[t._v("头文件")]),a("code",[t._v("Carer.h")]),t._v(" 引用了其他模块中的 Animal 类，但是并"),a("strong",[t._v("没有解引用")]),t._v("（如没有进行指针的解引用"),a("code",[t._v("->")]),t._v("，仅做变量声明使用） Animal，只有"),a("strong",[t._v("源文件")]),a("code",[t._v("Carer.cpp")]),a("strong",[t._v("解引用")]),t._v("了 Animal。")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("那么这个头文件是"),a("strong",[t._v("不需要导入")]),a("code",[t._v("Animal.h")]),t._v(" 的，只需要一个前置声明 "),a("code",[t._v("struct Animal")]),t._v("，只有实际调用了 Animal 成员函数的源文件需要导入 Animal.h。")]),t._v(" "),a("li",[t._v("好处：加快编译速度，防止循环引用。")])])])]),t._v(" "),a("h2",{attrs:{id:"八、依赖另一个子项目-则需要链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、依赖另一个子项目-则需要链接"}},[t._v("#")]),t._v(" 八、依赖另一个子项目，则需要链接")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("让 "),a("code",[t._v("pybmain")]),t._v(" 链接上 "),a("code",[t._v("biology")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pybmain "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("PUBLIC")]),t._v(" biology"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("由于 "),a("code",[t._v("PUBLIC")]),t._v(" 属性"),a("strong",[t._v("具有传染性")]),t._v("，"),a("code",[t._v("根/biology/include")]),t._v(" 现在也加入 "),a("code",[t._v("pybmain")]),t._v(" 的"),a("strong",[t._v("头文件搜索路径")]),t._v("了，因此 pybmain 里可以 "),a("code",[t._v("#include")]),t._v(" 到 "),a("code",[t._v("biology")]),t._v(" 的头文件。")])])]),t._v(" "),a("h2",{attrs:{id:"九、cmake中的include"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、cmake中的include"}},[t._v("#")]),t._v(" 九、CMake中的include")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("写 "),a("code",[t._v("include(XXX)")]),t._v("，则他会在 "),a("code",[t._v("CMAKE_MODULE_PATH")]),t._v(" 这个列表中的所有路径下查找 "),a("code",[t._v("XXX.cmake")]),t._v(" 这个文件。")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("因此在include前，首先需要把"),a("code",[t._v("XXX.cmake")]),t._v("文件的路径加到"),a("code",[t._v("CMAKE_MODULE_PATH")]),t._v("中；")]),t._v(" "),a("li",[a("code",[t._v("CMAKE_MODULE_PATH")]),t._v("列表的每个值用"),a("code",[t._v(";")]),t._v("分割。")])])]),t._v(" "),a("li",[a("p",[t._v("这样你可以在 "),a("code",[t._v("XXX.cmake")]),t._v(" 里"),a("strong",[t._v("写一些你常用的函数，宏，变量")]),t._v("等")])])]),t._v(" "),a("p",[t._v("示例"),a("code",[t._v("MyUsefulFuncs.cmake")]),t._v("内容如下：")]),t._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("macro")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_add_target name type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用法: my_add_target(pybmain EXECUTABLE)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GLOB_RECURSE srcs CONFIGURE_DEPENDS src/*.cpp src/*.h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("MATCHES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EXECUTABLE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("srcs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_library")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("srcs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endif")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_include_directories")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("PUBLIC")]),t._v(" include"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endmacro")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SOME_USEFUL_GLOBAL_VAR    "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("ON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ANOTHER_USEFUL_GLOBAL_VAR "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("OFF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("a",{attrs:{href:"https://cmake.org/cmake/help/latest/command/function.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("function-CMake"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://cmake.org/cmake/help/latest/command/macro.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("macro-CMake"),a("OutboundLink")],1),t._v("的区别可以详细查看文档")]),t._v(" "),a("li",[t._v("简单来说："),a("code",[t._v("macro")]),t._v(" 相当于直接把代码"),a("strong",[t._v("粘贴")]),t._v("过去，直接访问调用者的作用域。这里写的相对路径 "),a("code",[t._v("include")]),t._v(" 和 "),a("code",[t._v("src")]),t._v("，是"),a("strong",[t._v("基于调用者所在路径")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("function")]),t._v(" 则是会创建一个闭包，"),a("strong",[t._v("优先访问定义者的作用域")]),t._v("。这里写的相对路径 "),a("code",[t._v("include")]),t._v(" 和 "),a("code",[t._v("src")]),t._v("，则是"),a("strong",[t._v("基于定义者所在路径")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("include")]),t._v("和"),a("code",[t._v("add_subdirectory")]),t._v("同样，前者相当于直接粘贴，直接访问调用者的作用域，后者则优先访问定义者的作用域。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);