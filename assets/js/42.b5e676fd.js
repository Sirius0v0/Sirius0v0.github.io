(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{513:function(t,v,_){"use strict";_.r(v);var a=_(14),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"程序的内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#程序的内存模型"}},[t._v("#")]),t._v(" 程序的内存模型")]),t._v(" "),_("h2",{attrs:{id:"代码区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码区"}},[t._v("#")]),t._v(" 代码区")]),t._v(" "),_("blockquote",[_("p",[t._v("存放函数体的二进制代码，由操作系统进行管理")])]),t._v(" "),_("p",[t._v("程序运行前即存在。代码区是 "),_("strong",[t._v("共享与只读")]),t._v(" 的。")]),t._v(" "),_("h2",{attrs:{id:"全局区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#全局区"}},[t._v("#")]),t._v(" 全局区")]),t._v(" "),_("blockquote",[_("p",[t._v("存放全局变量和静态变量及常量")])]),t._v(" "),_("p",[t._v("程序运行前即存在。")]),t._v(" "),_("ul",[_("li",[t._v("全局变量、静态变量和常量存放在此")]),t._v(" "),_("li",[t._v("常量中字符串常量和"),_("code",[t._v("const")]),t._v("修饰的全局常量放在全局区，"),_("strong",[t._v("局部常量不在全局区")]),t._v("；")]),t._v(" "),_("li",[t._v("该区数据在程序结束后由操作系统释放")])]),t._v(" "),_("h2",{attrs:{id:"栈区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈区"}},[t._v("#")]),t._v(" 栈区")]),t._v(" "),_("blockquote",[_("p",[t._v("由编译器自动分配释放，存放函数的参数值、局部变量等")])]),t._v(" "),_("ul",[_("li",[t._v("函数参数、局部变量存放在此")]),t._v(" "),_("li",[_("strong",[t._v("不要返回局部变量的地址，栈区开辟的数据由编译器自动释放")])])]),t._v(" "),_("h2",{attrs:{id:"堆区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆区"}},[t._v("#")]),t._v(" 堆区")]),t._v(" "),_("blockquote",[_("p",[t._v("由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收")])]),t._v(" "),_("ul",[_("li",[t._v("C++中主要用"),_("code",[t._v("new")]),t._v("在堆区开辟内存")])])])}),[],!1,null,null,null);v.default=s.exports}}]);